:root {
  color-scheme: only light;
}

:root.mc-theme-dark {
  color-scheme: only dark;
}

body {
  background-color: var(--mc-background-color, var(--mc-surface));
  margin: 0;
  width: 100vw;
  display: grid;
  overflow: hidden;
  grid-template-columns: min-content minmax(0, 1fr) min-content;
  grid-template-rows: min-content minmax(0, 1fr) min-content;
  grid-template-areas:
    "navigation header header"
    "navigation main side"
    "navigation footer footer";
  overflow: hidden;
  overflow-y: auto;
}

body.pane-layout {
  height: 100vh;
}

/* TODO see if i can apply this state from the components. Like util.lockPageScroll */
body:has(dialog[open]),
body:has([role=dialog][open]:not([anchor])),
body.window-compact:has(mc-search.open) {
  overflow: hidden
}

mc-pane::-webkit-resizer {
  border: 2px solid black;
  background: blue;
}

.prevent-user-selection {
  -webkit-user-select: none;
  user-select: none;
}

@keyframes action-bounce-in {
  0% {
    transform: scale(.7);
  }

  50% {
    transform: scale(1.05);
  }

  70% {
    transform: scale(.9);
  }

  100% {
    transform: scale(1);
  }
}

/* For some reason i cannot set ::backdrop on :host */
.modal[popover]::backdrop {
  pointer-events: none;
  background-color: var(--mc-scrim);
  opacity: 0;
  transition:
    display allow-discrete,
    overlay allow-discrete,
    opacity;
  transition-duration: var(--mc-motion-duration-short3);
}

.modal[popover]:popover-open::backdrop {
  pointer-events: all !important;
  opacity: 32%;
  transition-duration: var(--mc-motion-duration-medium2);
}

@starting-style {
  .modal[popover]:popover-open::backdrop {
    opacity: 0;
  }
}


/* Used to simulate overscroll without triggering browser refresh */
html.pull-to-refresh-active {
  overscroll-behavior: none;
}

html.pull-to-refresh-inactive body {
  transition: margin-top;
  transition-duration: 200ms;
}

/* Fix for view transition stacking order. This includes the elements into the new stacking order */
/* mc-top-app-bar,
mc-bottom-app-bar {
  view-transition-name: stacking-order-fix;
} */


mc-side-sheet mc-divider {
  display: flex;
  margin-top: 16px;
  margin-bottom: 16px;
  border-top: 1px solid rgb(from var(--mc-outline) r g b / 26%);
}
