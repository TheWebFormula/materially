:host {
  --mc-switch-track-color-local: var(--mc-switch-track-color, var(--mc-surface-container-highest));
  --mc-switch-selected-track-color-local: var(--mc-switch-selected-track-color, var(--mc-primary));
  --mc-switch-handle-color-local: var(--mc-switch-handle-color, var(--mc-outline));
  --mc-switch-selected-handle-color-local: var(--mc-switch-selected-handle-color, var(--mc-on-primary));
  --mc-switch-icon-color-local: var(--mc-switch-icon-color, var(--mc-surface-container-highest));
  --mc-switch-selected-icon-color-local: var(--mc-switch-selected-icon-color, var(--mc-primary));


  display: inline-flex;
  outline: none;
  -webkit-tap-highlight-color: transparent;
  cursor: pointer;
  margin: 9px 0;
  flex-grow: 1;
}

:host(.min-width) {
  flex-grow: 0;
}

.container:not(.animation) {
  --mc-motion-duration-short1: 0s;
  --mc-motion-duration-medium1: 0s;
  --mc-motion-duration-medium2: 0s;
}

:host([disabled]) {
  cursor: default;
  pointer-events: none;
  
  .container {
    .track {
      &::before {     
        opacity: 0.12; 
        background-color: var(--mc-surface-container-highest);
        border-color: var(--mc-on-surface);
      }

      .thumb::before {
        opacity: 0.38; 
        background-color: var(--mc-on-surface);
      }
    }
  }

  .container:has(input:checked) {
    .track {
      &::before {      
        background-color: var(--mc-on-surface);
      }

      .thumb::before {
        background-color: var(--mc-on-surface);
      }
    }
  }

  label {
    color: var(--mc-on-surface);
    opacity: 0.38;
  }
}

.container {
  align-items: center;
  display: inline-flex;
  flex-shrink: 0;
  position: relative;
  min-width: 52px;
  height: 32px;
  border-radius: var(--mc-shape-large);
}

input {
  appearance: none;
  height: 48px;
  outline: none;
  margin: 0;
  position: absolute;
  width: 100%;
  z-index: 1;
  cursor: inherit;
}

.track {
  position: absolute;
  width: 52px;
  height: 100%;
  box-sizing: border-box;
  border-radius: inherit;
  display: flex;
  justify-content: center;
  align-items: center;

  &::before {
    content: '';
    display: flex;
    position: absolute;
    height: 100%;
    width: 100%;
    border-radius: inherit;
    box-sizing: border-box;
    transition-property: opacity, background-color;
    transition-duration: var(--mc-motion-duration-short1);
  
    background-color: var(--mc-switch-track-color-local);
    border: 2px solid;
    border-color: var(--mc-outline);
  }

  .thumb-container {
    display: flex;
    place-content: center;
    place-items: center;
    position: relative;
    margin-inline-end: 20px;
    
    transition: margin;
    transition-duration: var(--mc-motion-duration-medium2);
    transition-timing-function: var(--mc-transition-overshoot);
  }

  .thumb {
    position: relative;
    border-radius: var(--mc-shape-full);
    height: 16px;
    width: 16px;
  
    transform-origin: center;
    transition-property: height, width;
    transition-duration: var(--mc-motion-duration-medium1), var(--mc-motion-duration-medium1);
    transition-timing-function: var(--mc-motion-easing-standard), var(--mc-motion-easing-standard);
    z-index: 0;

    &::before {
      content: '';
      display: flex;
      inset: 0;
      position: absolute;
      border-radius: inherit;
      box-sizing: border-box;
      transition: background-color;
      transition-duration: var(--mc-motion-duration-short1);
    
      background-color: var(--mc-switch-handle-color-local);
    }
  }
}

.container:has(input:checked) {
  .track {
    &::before {
      background-color: var(--mc-switch-selected-track-color-local);
    }

    .thumb-container {
      margin-inline-end: unset;
      margin-inline-start: 20px;
    }

    .thumb {
      width: 24px;
      height: 24px;

      &::before {
        background-color: var(--mc-switch-selected-handle-color-local);
      }
    }
  }
}

:host([icon]),
:host([unchecked-icon]) {
  .track {
    .thumb {
      width: 24px;
      height: 24px;
    }
  }
}


.container:has(input:invalid.touched) {
  .track {
    &::before {
      border-color: var(--mc-error);
    }

    .thumb::before {
      background-color: var(--mc-error);
    }
  }
}

label {
  display: none;
  flex-grow: inherit;
  user-select: none;
  -webkit-user-select: none;
  cursor: inherit;
  white-space: nowrap;
  height: 32px;
  line-height: 32px;
  margin-right: 16px;

  font-size: var(--mc-font-large-label-size);
  font-weight: var(--mc-font-large-label-weight);
  letter-spacing: var(--mc-font-large-label-tracking);

  &.show {
    display: inline-flex;
  }

  &.right {
    justify-content: flex-end;
    order: 1;
    margin-right: 0;
    margin-left: 16px;
  }
}

label:has(~ .container input:invalid.touched) {
  color: var(--mc-error);
}

.icon {
  position: absolute;
  inset: 0;
  margin: auto;
  display: flex;
  align-items: center;
  justify-content: center;
  fill: currentColor;

  transition:
    fill 67ms linear, opacity 33ms linear,
    transform 167ms var(--mc-motion-easing-standard);
  opacity: 0;
}

.icon.icon-checked {
  width: 16px;
  height: 16px;
  color: var(--mc-switch-selected-icon-color-local);
}

.icon.icon-unchecked {
  width: 16px;
  height: 16px;
  color: var(--mc-switch-icon-color-local);
}

:host([checked-icon]),
:host([icon]) {
  .container:has(input:checked) .icon.icon-checked {
    opacity: 1;
  }
}

:host([unchecked-icon]),
:host([icon]) {
  .container:has(input:not(:checked)) .icon.icon-unchecked {
    opacity: 1;
  }
}

mc-state-layer {
  --mc-state-layer-hover-color: var(--mc-on-surface);
  --mc-state-layer-focus-color: var(--mc-on-surface);
}

/* TODO focus ring color broken? */
